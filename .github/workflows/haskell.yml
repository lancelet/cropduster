name: Haskell CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      HUGO_VERSION: 0.115.4

    steps:
    - uses: actions/checkout@v3
    - uses: haskell-actions/setup@v2
      with:
        ghc-version: '9.4.7'
        cabal-version: '3.8.1.0'
    - uses: actions/setup-go@v4
      with:
        go-version: '>=1.21.3'

    - name: Cache
      uses: actions/cache@v3
      env:
        cache-name: cache-cabal
      with:
        path: ~/.cabal
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install dependencies
      run: |
        sudo apt update
        cabal update
        cabal build --only-dependencies --enable-tests --enable-benchmarks
        sudo apt-get install -y ffmpeg
        python -m venv .venv
        source .venv/bin/activate
        pip install scipy matplotlib
        wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
        && sudo dpkg -i ${{ runner.temp }}/hugo.deb
        sudo snap install dart-sass
        [[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true
        curl -O -J https://github.com/jgm/pandoc/releases/download/3.1.8/pandoc-3.1.8-linux-amd64.tar.gz
        sudo tar xvzf pandoc-3.1.8-linux-amd64.tar.gz --strip-components 1 -C /usr/local
        rm pandoc-3.1.8-linux-amd64.tar.gz

    - name: Build
      run: cabal build --enable-tests --enable-benchmarks all

    - name: Run tests
      run: cabal test all

    - name: Run video generation
      run: |
        source .venv/bin/activate
        ./linfit-examples.sh
        ./msd-examples.sh

    - name: Create slides
      run: |
        pushd ./slides
        ./build.sh
        popd
        cp ./slides/index.html ./gh-site/static/slides.html

    - name: Setup Pages
      id: pages
      uses: actions/configure-pages@v3

    - name: Build Hugo site
      env:
        # For maximum backward compatibility with Hugo modules
        HUGO_ENVIRONMENT: production
        HUGO_ENV: production
      run: |
        pushd gh-site
        hugo \
          --gc \
          --minify \
          --baseURL "${{ steps.pages.outputs.base_url }}/"
        cat public/slides.html

    - name: Upload pages artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: ./gh-site/public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2